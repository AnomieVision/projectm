<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="playlist__items_8h" kind="file" language="C++">
    <compoundname>playlist_items.h</compoundname>
    <includes refid="playlist__types_8h" local="yes">projectM-4/playlist_types.h</includes>
    <includedby refid="playlist_8h" local="yes">artifacts/projectm-linux-shared-latest/include/projectM-4/playlist.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h</label>
        <link refid="playlist__items_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>projectM-4/playlist_types.h</label>
        <link refid="playlist__types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>projectM-4/projectM_playlist_export.h</label>
        <link refid="projectM__playlist__export_8h_source"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>artifacts/projectm-linux-shared-latest/include/projectM-4/playlist.h</label>
        <link refid="playlist_8h"/>
      </node>
      <node id="1">
        <label>artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h</label>
        <link refid="playlist__items_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="playlist__items_8h_1ad37a1b2068b2645edf40aaa7bb0bc815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT uint32_t</type>
        <definition>PROJECTM_PLAYLIST_EXPORT uint32_t projectm_playlist_size</definition>
        <argsstring>(projectm_playlist_handle instance)</argsstring>
        <name>projectm_playlist_size</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Returns the number of presets in the current playlist. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of presets in the current playlist. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" line="39" column="35" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" declline="39" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="playlist__items_8h_1a5fc3e5271089d6bdcefab80d6e33575e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT void</type>
        <definition>PROJECTM_PLAYLIST_EXPORT void projectm_playlist_clear</definition>
        <argsstring>(projectm_playlist_handle instance)</argsstring>
        <name>projectm_playlist_clear</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Clears the playlist. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" line="45" column="31" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" declline="45" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="playlist__items_8h_1a8536d2e21c9f479fd06df3e449c292e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT char **</type>
        <definition>PROJECTM_PLAYLIST_EXPORT char ** projectm_playlist_items</definition>
        <argsstring>(projectm_playlist_handle instance, uint32_t start, uint32_t count)</argsstring>
        <name>projectm_playlist_items</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Returns a list of preset files inside the given range of the current playlist, in order. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to return the whole playlist to save it to a file, or just a part of it for use in virtual lists. If less elements than given in <emphasis>count</emphasis> are available, only the remainder of items after the starting index are returned. If the starting index equals or exceeds the playlist size, an empty list is returned.</para>
<para><simplesect kind="note"><para>Call <ref refid="playlist__memory_8h_1ac4075eead087c00a9d96d1659727661b" kindref="member">projectm_playlist_free_string_array()</ref> when you&apos;re done using the list. </para>
</simplesect>
<simplesect kind="note"><para>Ideally, don&apos;t rely on the value provided as count to iterate over the filenames. Instead, look for the terminating null pointer to abort the loop. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>The zero-based starting index of the range to return. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number if items to return. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a list of char pointers, each containing a single preset. The last entry is denoted by a null pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" line="64" column="31" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" declline="64" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="playlist__items_8h_1a04c582672d8e7c6bc635daacb4afd9c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT char *</type>
        <definition>PROJECTM_PLAYLIST_EXPORT char * projectm_playlist_item</definition>
        <argsstring>(projectm_playlist_handle instance, uint32_t index)</argsstring>
        <name>projectm_playlist_item</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the name of a preset at the given index in the current playlist. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Call <ref refid="playlist__memory_8h_1a7d456c04db9c78871a8cd2425736729b" kindref="member">projectm_playlist_free_string()</ref> when you&apos;re done using the return value. </para>
</simplesect>
<simplesect kind="note"><para>If you need to retrieve a major part of playlist filenames, use <ref refid="playlist__items_8h_1a8536d2e21c9f479fd06df3e449c292e6" kindref="member">projectm_playlist_items()</ref> instead. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to retrieve the filename for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The filename of the requested preset, or NULL if the index was out of bounds or the playlist is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" line="76" column="31" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" declline="76" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="playlist__items_8h_1a25ac744f026be5fff8ca8a16208f4372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT uint32_t</type>
        <definition>PROJECTM_PLAYLIST_EXPORT uint32_t projectm_playlist_add_path</definition>
        <argsstring>(projectm_playlist_handle instance, const char *path, bool recurse_subdirs, bool allow_duplicates)</argsstring>
        <name>projectm_playlist_add_path</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recurse_subdirs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_duplicates</declname>
        </param>
        <briefdescription>
<para>Appends presets from the given path to the end of the current playlist. </para>
        </briefdescription>
        <detaileddescription>
<para>This method will scan the given path for files with a &quot;.milk&quot; extension and add these to the playlist.</para>
<para>Symbolic links are not followed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>A local filesystem path to scan for presets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recurse_subdirs</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, subdirectories of the given path will also be scanned. If false, only the exact path given is searched for presets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_duplicates</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, files found will always be added. If false, only files are added that do not already exist in the current playlist. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of files added. 0 may indicate issues scanning the path. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" line="94" column="35" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" declline="94" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="playlist__items_8h_1ac113f1c437ca24350c03290a50e97713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT uint32_t</type>
        <definition>PROJECTM_PLAYLIST_EXPORT uint32_t projectm_playlist_insert_path</definition>
        <argsstring>(projectm_playlist_handle instance, const char *path, uint32_t index, bool recurse_subdirs, bool allow_duplicates)</argsstring>
        <name>projectm_playlist_insert_path</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recurse_subdirs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_duplicates</declname>
        </param>
        <briefdescription>
<para>Inserts presets from the given path to the end of the current playlist. </para>
        </briefdescription>
        <detaileddescription>
<para>This method will scan the given path for files with a &quot;.milk&quot; extension and add these to the playlist.</para>
<para>Symbolic links are not followed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>A local filesystem path to scan for presets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to insert the presets at. If it exceeds the playlist size, the presets are added at the end of the playlist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recurse_subdirs</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, subdirectories of the given path will also be scanned. If false, only the exact path given is searched for presets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_duplicates</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, files found will always be added. If false, only files are added that do not already exist in the current playlist. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of files added. 0 may indicate issues scanning the path. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" line="116" column="35" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" declline="116" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="playlist__items_8h_1a259c14b64dcd13918f1c69a3df53ee29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT bool</type>
        <definition>PROJECTM_PLAYLIST_EXPORT bool projectm_playlist_add_preset</definition>
        <argsstring>(projectm_playlist_handle instance, const char *filename, bool allow_duplicates)</argsstring>
        <name>projectm_playlist_add_preset</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_duplicates</declname>
        </param>
        <briefdescription>
<para>Adds a single preset to the end of the playlist. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The file is not checked for existence or for being readable.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>A local preset filename. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_duplicates</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the preset filename will always be added. If false, the preset is only added to the playlist if the exact filename doesn&apos;t exist in the current playlist. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the file was added to the playlist, false if the file was a duplicate and allow_duplicates was set to false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" line="132" column="31" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" declline="132" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="playlist__items_8h_1ae83b3c4a978ebe8e00ebcd37b44f6665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT bool</type>
        <definition>PROJECTM_PLAYLIST_EXPORT bool projectm_playlist_insert_preset</definition>
        <argsstring>(projectm_playlist_handle instance, const char *filename, uint32_t index, bool allow_duplicates)</argsstring>
        <name>projectm_playlist_insert_preset</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_duplicates</declname>
        </param>
        <briefdescription>
<para>Adds a single preset to the playlist at the specified position. </para>
        </briefdescription>
        <detaileddescription>
<para>To always add a file at the end of the playlist, use <ref refid="playlist__items_8h_1a259c14b64dcd13918f1c69a3df53ee29" kindref="member">projectm_playlist_add_preset()</ref> as it is performs better.</para>
<para><simplesect kind="note"><para>The file is not checked for existence or for being readable.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>A local preset filename. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to insert the preset at. If it exceeds the playlist size, the preset is added at the end of the playlist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_duplicates</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the preset filename will always be added. If false, the preset is only added to the playlist if the exact filename doesn&apos;t exist in the current playlist. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the file was added to the playlist, false if the file was a duplicate and allow_duplicates was set to false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" line="153" column="31" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" declline="153" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="playlist__items_8h_1a8c96362269627ae95666e9234011314c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT uint32_t</type>
        <definition>PROJECTM_PLAYLIST_EXPORT uint32_t projectm_playlist_add_presets</definition>
        <argsstring>(projectm_playlist_handle instance, const char **filenames, uint32_t count, bool allow_duplicates)</argsstring>
        <name>projectm_playlist_add_presets</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>filenames</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_duplicates</declname>
        </param>
        <briefdescription>
<para>Adds a list of presets to the end of the playlist. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The files are not checked for existence or for being readable.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filenames</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of local preset filenames. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of files in the list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_duplicates</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the preset filenames will always be added. If false, a preset is only added to the playlist if the exact filename doesn&apos;t exist in the current playlist. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of files added to the playlist. Ranges between 0 and count. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" line="169" column="35" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" declline="169" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="playlist__items_8h_1ae4cd7eef2798e00c8ca0efc8d31e3665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT uint32_t</type>
        <definition>PROJECTM_PLAYLIST_EXPORT uint32_t projectm_playlist_insert_presets</definition>
        <argsstring>(projectm_playlist_handle instance, const char **filenames, uint32_t count, unsigned int index, bool allow_duplicates)</argsstring>
        <name>projectm_playlist_insert_presets</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>filenames</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_duplicates</declname>
        </param>
        <briefdescription>
<para>Adds a single preset to the playlist at the specified position. </para>
        </briefdescription>
        <detaileddescription>
<para>To always add a file at the end of the playlist, use <ref refid="playlist__items_8h_1a259c14b64dcd13918f1c69a3df53ee29" kindref="member">projectm_playlist_add_preset()</ref> as it is performs better.</para>
<para><simplesect kind="note"><para>The files are not checked for existence or for being readable.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filenames</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of local preset filenames. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of files in the list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to insert the presets at. If it exceeds the playlist size, the presets are added at the end of the playlist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_duplicates</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the preset filenames will always be added. If false, a preset is only added to the playlist if the exact filename doesn&apos;t exist in the current playlist. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of files added to the playlist. Ranges between 0 and count. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" line="190" column="35" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" declline="190" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="playlist__items_8h_1aeda243ac96a84e3c5bd311cd4b770aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT bool</type>
        <definition>PROJECTM_PLAYLIST_EXPORT bool projectm_playlist_remove_preset</definition>
        <argsstring>(projectm_playlist_handle instance, uint32_t index)</argsstring>
        <name>projectm_playlist_remove_preset</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Removes a single preset from the playlist at the specified position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The preset index to remove. If it exceeds the playlist size, no preset will be removed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the preset was removed from the playlist, false if the index was out of range. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" line="201" column="31" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" declline="201" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="playlist__items_8h_1aa2bd55adf5db479b7456fc0c0eb72670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT uint32_t</type>
        <definition>PROJECTM_PLAYLIST_EXPORT uint32_t projectm_playlist_remove_presets</definition>
        <argsstring>(projectm_playlist_handle instance, uint32_t index, uint32_t count)</argsstring>
        <name>projectm_playlist_remove_presets</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Removes a number of presets from the playlist from the specified position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The first preset index to remove. If it exceeds the playlist size, no preset will be removed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of presets to remove from the given index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of presets removed from the playlist. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" line="212" column="35" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" declline="212" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="playlist__items_8h_1a4c5f960b94ecdc55b30ecf6293dcaeee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT void</type>
        <definition>PROJECTM_PLAYLIST_EXPORT void projectm_playlist_sort</definition>
        <argsstring>(projectm_playlist_handle instance, uint32_t start_index, uint32_t count, projectm_playlist_sort_predicate predicate, projectm_playlist_sort_order order)</argsstring>
        <name>projectm_playlist_sort</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>start_index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="playlist__types_8h_1ac021bfd322df1574f952477ceb8f52ed" kindref="member">projectm_playlist_sort_predicate</ref></type>
          <declname>predicate</declname>
        </param>
        <param>
          <type><ref refid="playlist__types_8h_1acf45fb9fd248772b61554b7268bea9f2" kindref="member">projectm_playlist_sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Sorts part or the whole playlist according to the given predicate and order. </para>
        </briefdescription>
        <detaileddescription>
<para>It is safe to provide values in start_index and count that will exceed the number of items in the playlist. Only items that fall into an existing index range are sorted. If start_index is equal to or larger than the playlist size, no items are sorted. If start_index is inside the playlist, but adding count results in an index outside the playlist, items until the end are sorted.</para>
<para>Sort order is lexicographical for both predicates and case-sensitive.</para>
<para>If invalid values are provides as predicate or order, the defaults as mentioned in the parameter description are used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting index to begin sorting at. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of items, beginning at start_index, to sort. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>The predicate to use for sorting. Default is SORT_PREDICATE_FULL_PATH. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort order. Default is SORT_ORDER_ASCENDING. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" line="235" column="31" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h" declline="235" declcolumn="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Playlist item management functions. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>2003-2023 projectM Team </para>
</simplesect>
projectM <ndash/> Milkdrop-esque visualisation SDK Copyright (C)2003-2023 projectM Team</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA See &apos;LICENSE.txt&apos; included within this release </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="playlist__types_8h" kindref="compound">projectM-4/playlist_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="playlist__items_8h_1ad37a1b2068b2645edf40aaa7bb0bc815" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/>uint32_t<sp/><ref refid="playlist__items_8h_1ad37a1b2068b2645edf40aaa7bb0bc815" kindref="member">projectm_playlist_size</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="playlist__items_8h_1a5fc3e5271089d6bdcefab80d6e33575e" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="playlist__items_8h_1a5fc3e5271089d6bdcefab80d6e33575e" kindref="member">projectm_playlist_clear</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="playlist__items_8h_1a8536d2e21c9f479fd06df3e449c292e6" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><ref refid="playlist__items_8h_1a8536d2e21c9f479fd06df3e449c292e6" kindref="member">projectm_playlist_items</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance,<sp/>uint32_t<sp/>start,<sp/>uint32_t<sp/>count);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="playlist__items_8h_1a04c582672d8e7c6bc635daacb4afd9c4" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="playlist__items_8h_1a04c582672d8e7c6bc635daacb4afd9c4" kindref="member">projectm_playlist_item</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance,<sp/>uint32_t<sp/>index);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="playlist__items_8h_1a25ac744f026be5fff8ca8a16208f4372" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/>uint32_t<sp/><ref refid="playlist__items_8h_1a25ac744f026be5fff8ca8a16208f4372" kindref="member">projectm_playlist_add_path</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recurse_subdirs,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_duplicates);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="playlist__items_8h_1ac113f1c437ca24350c03290a50e97713" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/>uint32_t<sp/><ref refid="playlist__items_8h_1ac113f1c437ca24350c03290a50e97713" kindref="member">projectm_playlist_insert_path</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>index,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recurse_subdirs,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_duplicates);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="playlist__items_8h_1a259c14b64dcd13918f1c69a3df53ee29" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="playlist__items_8h_1a259c14b64dcd13918f1c69a3df53ee29" kindref="member">projectm_playlist_add_preset</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_duplicates);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="playlist__items_8h_1ae83b3c4a978ebe8e00ebcd37b44f6665" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="playlist__items_8h_1ae83b3c4a978ebe8e00ebcd37b44f6665" kindref="member">projectm_playlist_insert_preset</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>index,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_duplicates);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="playlist__items_8h_1a8c96362269627ae95666e9234011314c" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/>uint32_t<sp/><ref refid="playlist__items_8h_1a8c96362269627ae95666e9234011314c" kindref="member">projectm_playlist_add_presets</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>filenames,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>count,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_duplicates);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="playlist__items_8h_1ae4cd7eef2798e00c8ca0efc8d31e3665" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/>uint32_t<sp/><ref refid="playlist__items_8h_1ae4cd7eef2798e00c8ca0efc8d31e3665" kindref="member">projectm_playlist_insert_presets</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>filenames,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>count,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_duplicates);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="playlist__items_8h_1aeda243ac96a84e3c5bd311cd4b770aeb" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="playlist__items_8h_1aeda243ac96a84e3c5bd311cd4b770aeb" kindref="member">projectm_playlist_remove_preset</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance,<sp/>uint32_t<sp/>index);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="playlist__items_8h_1aa2bd55adf5db479b7456fc0c0eb72670" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/>uint32_t<sp/><ref refid="playlist__items_8h_1aa2bd55adf5db479b7456fc0c0eb72670" kindref="member">projectm_playlist_remove_presets</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance,<sp/>uint32_t<sp/>index,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>count);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="playlist__items_8h_1a4c5f960b94ecdc55b30ecf6293dcaeee" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="playlist__items_8h_1a4c5f960b94ecdc55b30ecf6293dcaeee" kindref="member">projectm_playlist_sort</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance,<sp/>uint32_t<sp/>start_index,<sp/>uint32_t<sp/>count,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="playlist__types_8h_1ac021bfd322df1574f952477ceb8f52ed" kindref="member">projectm_playlist_sort_predicate</ref><sp/>predicate,<sp/><ref refid="playlist__types_8h_1acf45fb9fd248772b61554b7268bea9f2" kindref="member">projectm_playlist_sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_items.h"/>
  </compounddef>
</doxygen>
