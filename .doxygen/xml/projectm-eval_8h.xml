<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="projectm-eval_8h" kind="file" language="C++">
    <compoundname>projectm-eval.h</compoundname>
      <sectiondef kind="define">
      <memberdef kind="define" id="projectm-eval_8h_1a25d823d3c476df0d749a549f38521278" prot="public" static="no">
        <name>PRJM_F_SIZE</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="15" column="9" bodyfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="projectm-eval_8h_1a5365ffba8d12b5c1195de5a020dee477" prot="public" static="no">
        <type>double</type>
        <definition>typedef double PRJM_EVAL_F</definition>
        <argsstring></argsstring>
        <name>PRJM_EVAL_F</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="22" column="16" bodyfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="projectm-eval_8h_1ab0e8de9e3807fcdbc8a6f893101d3ae7" prot="public" static="no">
        <type>PRJM_EVAL_F **</type>
        <definition>typedef PRJM_EVAL_F** projectm_eval_mem_buffer</definition>
        <argsstring></argsstring>
        <name>projectm_eval_mem_buffer</name>
        <briefdescription>
<para>Buffer pointer for megabuf/gmegabuf memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="43" column="21" bodyfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="projectm-eval_8h_1ab80552fc16dc8a0dec36f56bce79b54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void projectm_eval_memory_host_lock_mutex</definition>
        <argsstring>()</argsstring>
        <name>projectm_eval_memory_host_lock_mutex</name>
        <briefdescription>
<para>Host-defined lock function. Used to prevent race conditions with memory access. Only required if multiple expressions using the same global/local memory blocks will run in separate threads at the same time. Can be an empty function otherwise. The function is not required to use a recursive mutex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="52" column="6" declfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="projectm-eval_8h_1a88f4c5e4199caa25f15357583139b8b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void projectm_eval_memory_host_unlock_mutex</definition>
        <argsstring>()</argsstring>
        <name>projectm_eval_memory_host_unlock_mutex</name>
        <briefdescription>
<para>Host-defined unlock function. Used to prevent race conditions with memory access. Only required if multiple expressions using the same global/local memory blocks will run in separate threads at the same time. Can be an empty function otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="59" column="6" declfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="projectm-eval_8h_1a93e6511870bc1829e1b741326c0f789e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>projectm_eval_mem_buffer</type>
        <definition>projectm_eval_mem_buffer projectm_eval_memory_buffer_create</definition>
        <argsstring>()</argsstring>
        <name>projectm_eval_memory_buffer_create</name>
        <briefdescription>
<para>Allocates an empty memory buffer to hold gmegabuf data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A handle to a buffer which can be passed to <emphasis>projectm_eval_context_create()</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="65" column="26" declfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" declline="65" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="projectm-eval_8h_1ace436dba1cd1145bd905f8397db893e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void projectm_eval_memory_buffer_destroy</definition>
        <argsstring>(projectm_eval_mem_buffer buffer)</argsstring>
        <name>projectm_eval_memory_buffer_destroy</name>
        <param>
          <type>projectm_eval_mem_buffer</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Destroys a memory buffer and frees any allocated blocks. Only destroy a buffer if no context is using it anymore. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to the buffer which should be destroyed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="72" column="6" declfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" declline="72" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="projectm-eval_8h_1af1e349d50afed459a3264f6e186338da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void projectm_eval_memory_global_destroy</definition>
        <argsstring>()</argsstring>
        <name>projectm_eval_memory_global_destroy</name>
        <briefdescription>
<para>Frees the built-in global memory buffer. Only destroy the global buffer if no context is using it anymore. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="78" column="6" declfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" declline="78" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="projectm-eval_8h_1ae92972beea452c8e728721ee691d0ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct projectm_eval_context *</type>
        <definition>struct projectm_eval_context * projectm_eval_context_create</definition>
        <argsstring>(projectm_eval_mem_buffer global_mem, PRJM_EVAL_F(*global_variables)[100])</argsstring>
        <name>projectm_eval_context_create</name>
        <param>
          <type>projectm_eval_mem_buffer</type>
          <declname>global_mem</declname>
        </param>
        <param>
          <type>PRJM_EVAL_F(*)</type>
          <declname>global_variables</declname>
          <array>[100]</array>
        </param>
        <briefdescription>
<para>Creates a new execution context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_mem</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional pointer to a prjm_eval_mem_buffer_t which will be used as the global memory buffer (gmegabuf) or NULL to use the built-in global buffer. This buffer must not be destroyed before he last context using it was destroyed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>global_variables</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional pointer to an array of 100 variables to be used as global storage for the special reg00 to reg99 variables. If NULL, a built-in global storage will be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to the new execution context, or NULL if the context could not be created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="89" column="29" declfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" declline="89" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="projectm-eval_8h_1ad2b1c1f68356c797903407719f753077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void projectm_eval_context_destroy</definition>
        <argsstring>(struct projectm_eval_context *ctx)</argsstring>
        <name>projectm_eval_context_destroy</name>
        <param>
          <type>struct projectm_eval_context *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Destroys an execution context and frees all associated resources. Any code and variable references associated with the destroyed context will become invalid and must not be used after calling this function. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This will not destroy any remaining code handles. Call <emphasis>projectm_eval_code_destroy()</emphasis> on each handle separately. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to destroy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="99" column="6" declfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" declline="99" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="projectm-eval_8h_1a4d782fe76e08a75703092cc685b5ba4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void projectm_eval_context_free_memory</definition>
        <argsstring>(struct projectm_eval_context *ctx)</argsstring>
        <name>projectm_eval_context_free_memory</name>
        <param>
          <type>struct projectm_eval_context *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Frees the allocated memory of the context-local buffer, effectively resetting it. This will not clear the global memory buffer associated with the context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context which memory should be freed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="106" column="6" declfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" declline="106" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="projectm-eval_8h_1aa23a18a0dc09258cc64553815f5e712b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void projectm_eval_context_reset_variables</definition>
        <argsstring>(struct projectm_eval_context *ctx)</argsstring>
        <name>projectm_eval_context_reset_variables</name>
        <param>
          <type>struct projectm_eval_context *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Sets all context variables to 0.0. Registered variables will be kept intact, as the pointers will not change. Global variables reg00 to reg99 will also stay unchanged. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context in which to reset the variables. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="114" column="6" declfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" declline="114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="projectm-eval_8h_1a8f0b136a15eb4f5d034f2bc574bdfd78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRJM_EVAL_F *</type>
        <definition>PRJM_EVAL_F * projectm_eval_context_register_variable</definition>
        <argsstring>(struct projectm_eval_context *ctx, const char *var_name)</argsstring>
        <name>projectm_eval_context_register_variable</name>
        <param>
          <type>struct projectm_eval_context *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>var_name</declname>
        </param>
        <briefdescription>
<para>Registers a variable and returns the value pointer. Variables can be registered at any time. If the variable doesn&apos;t exist yet, it is created, otherwise the existing variable is being returned. Any code compiled before or after will use the same variable, referenced by its case-insensitive name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context in which to register the variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>var_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the variable. Case-insensitive. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the actual value of the variable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="125" column="13" declfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" declline="125" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="projectm-eval_8h_1a9269c14f9537d27437d38c43f11d3bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct projectm_eval_code *</type>
        <definition>struct projectm_eval_code * projectm_eval_code_compile</definition>
        <argsstring>(struct projectm_eval_context *ctx, const char *code)</argsstring>
        <name>projectm_eval_code_compile</name>
        <param>
          <type>struct projectm_eval_context *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Compiled the given code into an executable program. Call <emphasis>projectm_eval_get_error()</emphasis> to retrieve the compiler error and location on compilation failure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to associate the code with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>The code to compile. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle for the compiled program or NULL if compilation failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="134" column="26" declfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" declline="134" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="projectm-eval_8h_1a53cd1dba51fa1baffac749858db5e4f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void projectm_eval_code_destroy</definition>
        <argsstring>(struct projectm_eval_code *code_handle)</argsstring>
        <name>projectm_eval_code_destroy</name>
        <param>
          <type>struct projectm_eval_code *</type>
          <declname>code_handle</declname>
        </param>
        <briefdescription>
<para>Destroys a previously compiled code handle. Frees only the compiled code, but no associated resources like variables and megabuf contents. This makes it possible to recompile code and execute it in the same context without changing the state. Do not use the code handle after destroying it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The code handle to destroy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="143" column="6" declfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" declline="143" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="projectm-eval_8h_1a47d76237a4287bf5127e614b70ea7938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PRJM_EVAL_F</type>
        <definition>PRJM_EVAL_F projectm_eval_code_execute</definition>
        <argsstring>(struct projectm_eval_code *code_handle)</argsstring>
        <name>projectm_eval_code_execute</name>
        <param>
          <type>struct projectm_eval_code *</type>
          <declname>code_handle</declname>
        </param>
        <briefdescription>
<para>Executes the code in the given handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The compiled code to execute. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return value of the last expression on the top-level instruction list of the program. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="150" column="13" declfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" declline="150" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="projectm-eval_8h_1aa5a1b029f161f31a7b750e86b2ceb4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * projectm_eval_get_error</definition>
        <argsstring>(struct projectm_eval_context *ctx, int *line, int *column)</argsstring>
        <name>projectm_eval_get_error</name>
        <param>
          <type>struct projectm_eval_context *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Returns the error message of the last failed compile operation in the given context. The error message is cleared every time new code is compiled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to retrieve the error from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an integer which will receive the line number in which the error was found. Pass NULL if the value is of no interest. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an integer which will receive the column number in which the error was found. Pass NULL if the value is of no interest. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to an error message. The context keeps ownership of the pointer, do not free it. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" line="162" column="12" declfile="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h" declline="162" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Default<sp/>floating-point<sp/>number<sp/>size<sp/>in<sp/>bytes<sp/>(4<sp/>=<sp/>float,<sp/>8<sp/>=<sp/>double)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PRJM_F_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRJM_F_SIZE<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>On<sp/>32-bit<sp/>platforms,<sp/>it<sp/>may<sp/>be<sp/>more<sp/>performant<sp/>to<sp/>use<sp/>floats.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PRJM_F_SIZE<sp/>==<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>PRJM_EVAL_F;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PRJM_EVAL_F;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">projectm_eval_context;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">projectm_eval_code;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PRJM_EVAL_F**<sp/>projectm_eval_mem_buffer;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>projectm_eval_memory_host_lock_mutex();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>projectm_eval_memory_host_unlock_mutex();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">projectm_eval_mem_buffer<sp/>projectm_eval_memory_buffer_create();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>projectm_eval_memory_buffer_destroy(projectm_eval_mem_buffer<sp/>buffer);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>projectm_eval_memory_global_destroy();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">projectm_eval_context*<sp/>projectm_eval_context_create(projectm_eval_mem_buffer<sp/>global_mem,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRJM_EVAL_F<sp/>(*<sp/>global_variables)[100]);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>projectm_eval_context_destroy(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>projectm_eval_context*<sp/>ctx);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>projectm_eval_context_free_memory(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>projectm_eval_context*<sp/>ctx);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>projectm_eval_context_reset_variables(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>projectm_eval_context*<sp/>ctx);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">PRJM_EVAL_F*<sp/>projectm_eval_context_register_variable(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>projectm_eval_context*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>var_name);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">projectm_eval_code*<sp/>projectm_eval_code_compile(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>projectm_eval_context*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>code);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>projectm_eval_code_destroy(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>projectm_eval_code*<sp/>code_handle);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">PRJM_EVAL_F<sp/>projectm_eval_code_execute(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>projectm_eval_code*<sp/>code_handle);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>projectm_eval_get_error(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>projectm_eval_context*<sp/>ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>column);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="artifacts/projectm-linux-shared-latest/include/projectm-eval/projectm-eval.h"/>
  </compounddef>
</doxygen>
