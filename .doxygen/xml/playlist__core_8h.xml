<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="playlist__core_8h" kind="file" language="C++">
    <compoundname>playlist_core.h</compoundname>
    <includes refid="types_8h" local="yes">projectM-4/types.h</includes>
    <includes refid="playlist__types_8h" local="yes">projectM-4/playlist_types.h</includes>
    <includedby refid="playlist_8h" local="yes">artifacts/projectm-linux-shared-latest/include/projectM-4/playlist.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_core.h</label>
        <link refid="playlist__core_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>projectM-4/playlist_types.h</label>
        <link refid="playlist__types_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>projectM-4/projectM_export.h</label>
        <link refid="projectM__export_8h_source"/>
      </node>
      <node id="8">
        <label>projectM-4/projectM_playlist_export.h</label>
        <link refid="projectM__playlist__export_8h_source"/>
      </node>
      <node id="2">
        <label>projectM-4/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>artifacts/projectm-linux-shared-latest/include/projectM-4/playlist.h</label>
        <link refid="playlist_8h"/>
      </node>
      <node id="1">
        <label>artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_core.h</label>
        <link refid="playlist__core_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="playlist__core_8h_1a4cb3e5294e2bd60e6ca2cabffc647173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT <ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
        <definition>PROJECTM_PLAYLIST_EXPORT projectm_playlist_handle projectm_playlist_create</definition>
        <argsstring>(projectm_handle projectm_instance)</argsstring>
        <name>projectm_playlist_create</name>
        <param>
          <type><ref refid="types_8h_1a04d3124183c4f0d9df05100f11d5ea1b" kindref="member">projectm_handle</ref></type>
          <declname>projectm_instance</declname>
        </param>
        <briefdescription>
<para>Creates a playlist manager for the given projectM instance. </para>
        </briefdescription>
        <detaileddescription>
<para>Only one active playlist manager is supported per projectM instance. If multiple playlists use the same projectM instance, only the last created playlist manager will receive preset change callbacks from the projectM instance.</para>
<para>To switch to another playlist, use the <ref refid="playlist__core_8h_1ad3562ee750b00d1d03d1e384725d5e92" kindref="member">projectm_playlist_connect()</ref> method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>projectm_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The projectM instance to connect to. Can be a null pointer to leave the newly created playlist instance unconnected. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An opaque pointer to the newly created playlist manager instance. Null if creation failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_core.h" line="48" column="51" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_core.h" declline="48" declcolumn="51"/>
      </memberdef>
      <memberdef kind="function" id="playlist__core_8h_1a1e74b74b94bbf9da6fb5d6148078261a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT void</type>
        <definition>PROJECTM_PLAYLIST_EXPORT void projectm_playlist_destroy</definition>
        <argsstring>(projectm_playlist_handle instance)</argsstring>
        <name>projectm_playlist_destroy</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Destroys a previously created playlist manager. </para>
        </briefdescription>
        <detaileddescription>
<para>If the playlist manager is currently connected to a projectM instance, it will be disconnected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance to destroy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_core.h" line="57" column="31" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_core.h" declline="57" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="playlist__core_8h_1ad3562ee750b00d1d03d1e384725d5e92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT void</type>
        <definition>PROJECTM_PLAYLIST_EXPORT void projectm_playlist_connect</definition>
        <argsstring>(projectm_playlist_handle instance, projectm_handle projectm_instance)</argsstring>
        <name>projectm_playlist_connect</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1a04d3124183c4f0d9df05100f11d5ea1b" kindref="member">projectm_handle</ref></type>
          <declname>projectm_instance</declname>
        </param>
        <briefdescription>
<para>Connects the playlist manager to a projectM instance. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets or removes the preset switch callbacks and stores the projectM instance handle for use with manual preset switches via the playlist API.</para>
<para>When switching between multiple playlist managers, first call this method on the last used playlist manager with a null pointer for the projectM instance, then call this method with the actual projectM instance on the playlist manager that should be activated. It is also safe to call <ref refid="playlist__core_8h_1ad3562ee750b00d1d03d1e384725d5e92" kindref="member">projectm_playlist_connect()</ref> with a null projectM handle on all playlist manager instances before activating a single one with a valid, non-null projectM handle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>projectm_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The projectM instance to connect to. Can be a null pointer to remove an existing binding and clear the projectM preset switch callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_core.h" line="75" column="31" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_core.h" declline="75" declcolumn="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Core functions to instantiate, destroy and connect a projectM playlist. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>2003-2023 projectM Team </para>
</simplesect>
projectM <ndash/> Milkdrop-esque visualisation SDK Copyright (C)2003-2023 projectM Team</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA See &apos;LICENSE.txt&apos; included within this release </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="types_8h" kindref="compound">projectM-4/types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="playlist__types_8h" kindref="compound">projectM-4/playlist_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="playlist__core_8h_1a4cb3e5294e2bd60e6ca2cabffc647173" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/><ref refid="playlist__core_8h_1a4cb3e5294e2bd60e6ca2cabffc647173" kindref="member">projectm_playlist_create</ref>(<ref refid="types_8h_1a04d3124183c4f0d9df05100f11d5ea1b" kindref="member">projectm_handle</ref><sp/>projectm_instance);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="playlist__core_8h_1a1e74b74b94bbf9da6fb5d6148078261a" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="playlist__core_8h_1a1e74b74b94bbf9da6fb5d6148078261a" kindref="member">projectm_playlist_destroy</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="playlist__core_8h_1ad3562ee750b00d1d03d1e384725d5e92" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="playlist__core_8h_1ad3562ee750b00d1d03d1e384725d5e92" kindref="member">projectm_playlist_connect</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance,<sp/><ref refid="types_8h_1a04d3124183c4f0d9df05100f11d5ea1b" kindref="member">projectm_handle</ref><sp/>projectm_instance);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_core.h"/>
  </compounddef>
</doxygen>
