<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="playlist__callbacks_8h" kind="file" language="C++">
    <compoundname>playlist_callbacks.h</compoundname>
    <includes refid="playlist__types_8h" local="yes">projectM-4/playlist_types.h</includes>
    <includedby refid="playlist_8h" local="yes">artifacts/projectm-linux-shared-latest/include/projectM-4/playlist.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_callbacks.h</label>
        <link refid="playlist__callbacks_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>projectM-4/playlist_types.h</label>
        <link refid="playlist__types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>projectM-4/projectM_playlist_export.h</label>
        <link refid="projectM__playlist__export_8h_source"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>artifacts/projectm-linux-shared-latest/include/projectM-4/playlist.h</label>
        <link refid="playlist_8h"/>
      </node>
      <node id="1">
        <label>artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_callbacks.h</label>
        <link refid="playlist__callbacks_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="playlist__callbacks_8h_1afde318e6b0fe2cc68d93f2cfca396358" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* projectm_playlist_preset_switched_event) (bool is_hard_cut, unsigned int index, void *user_data)</definition>
        <argsstring>)(bool is_hard_cut, unsigned int index, void *user_data)</argsstring>
        <name>projectm_playlist_preset_switched_event</name>
        <briefdescription>
<para>Callback function that is executed on each preset change. </para>
        </briefdescription>
        <detaileddescription>
<para>Can be used for example to UpdateMeshSize the application window title. Applications must not switch presets inside this callback, as it can lead to infinite recursion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_hard_cut</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the preset was switched using a hard cut via beat detection. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist index of the new preset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>A user-defined data pointer that was provided when registering the callback, e.g. context information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_callbacks.h" line="45" column="9" bodyfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_callbacks.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="playlist__callbacks_8h_1a9c894f22a558dce02fceae5e306c8003" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* projectm_playlist_preset_switch_failed_event) (const char *preset_filename, const char *message, void *user_data)</definition>
        <argsstring>)(const char *preset_filename, const char *message, void *user_data)</argsstring>
        <name>projectm_playlist_preset_switch_failed_event</name>
        <briefdescription>
<para>Callback function that is executed if a preset change failed too often. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to the projectM API function, but will only be called if the preset switch failed multiple times in a row, e.g. due to missing files or broken presets. The application should decide what action to take.</para>
<para><simplesect kind="note"><para>Do NOT call any functions that switch presets inside the callback, at it might lead to infinite recursion and thus a stack overflow! </para>
</simplesect>
<simplesect kind="note"><para>The message pointer is only valid inside the callback. Make a copy if it need to be retained for later use. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>preset_filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The filename of the failed preset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The last error message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>A user-defined data pointer that was provided when registering the callback, e.g. context information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_callbacks.h" line="64" column="9" bodyfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_callbacks.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="playlist__callbacks_8h_1a8b287c054310ff48663fdab69d164856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT void</type>
        <definition>PROJECTM_PLAYLIST_EXPORT void projectm_playlist_set_preset_switched_event_callback</definition>
        <argsstring>(projectm_playlist_handle instance, projectm_playlist_preset_switched_event callback, void *user_data)</argsstring>
        <name>projectm_playlist_set_preset_switched_event_callback</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type><ref refid="playlist__callbacks_8h_1afde318e6b0fe2cc68d93f2cfca396358" kindref="member">projectm_playlist_preset_switched_event</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Sets a callback function that will be called when a preset changes. </para>
        </briefdescription>
        <detaileddescription>
<para>Only one callback can be registered per playlist instance. To remove the callback, use NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the callback function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to any data that will be sent back in the callback, e.g. context information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_callbacks.h" line="78" column="31" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_callbacks.h" declline="78" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="playlist__callbacks_8h_1a06f717a121acc3525d0b17cc31b84a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROJECTM_PLAYLIST_EXPORT void</type>
        <definition>PROJECTM_PLAYLIST_EXPORT void projectm_playlist_set_preset_switch_failed_event_callback</definition>
        <argsstring>(projectm_playlist_handle instance, projectm_playlist_preset_switch_failed_event callback, void *user_data)</argsstring>
        <name>projectm_playlist_set_preset_switch_failed_event_callback</name>
        <param>
          <type><ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type><ref refid="playlist__callbacks_8h_1a9c894f22a558dce02fceae5e306c8003" kindref="member">projectm_playlist_preset_switch_failed_event</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Sets a callback function that will be called when a preset change failed. </para>
        </briefdescription>
        <detaileddescription>
<para>Only one callback can be registered per projectM instance. To remove the callback, use NULL.</para>
<para>If the application want to receive projectM&apos;s analogous callback directly, use the <ref refid="callbacks_8h_1a3466617482c1c047562cfb41d6c586a1" kindref="member">projectm_set_preset_switch_failed_event_callback()</ref> function after calling <ref refid="playlist__core_8h_1a4cb3e5294e2bd60e6ca2cabffc647173" kindref="member">projectm_playlist_create()</ref> or <ref refid="playlist__core_8h_1ad3562ee750b00d1d03d1e384725d5e92" kindref="member">projectm_playlist_connect()</ref>, respectively, as these will both override the callback set in projectM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The playlist manager instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the callback function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to any data that will be sent back in the callback, e.g. context information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_callbacks.h" line="97" column="31" declfile="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_callbacks.h" declline="97" declcolumn="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions and prototypes for projectM playlist callbacks. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>2003-2023 projectM Team </para>
</simplesect>
projectM <ndash/> Milkdrop-esque visualisation SDK Copyright (C)2003-2023 projectM Team</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA See &apos;LICENSE.txt&apos; included within this release </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="playlist__types_8h" kindref="compound">projectM-4/playlist_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="playlist__callbacks_8h_1afde318e6b0fe2cc68d93f2cfca396358" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="playlist__callbacks_8h_1afde318e6b0fe2cc68d93f2cfca396358" kindref="member">projectm_playlist_preset_switched_event</ref>)(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_hard_cut,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="playlist__callbacks_8h_1a9c894f22a558dce02fceae5e306c8003" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="playlist__callbacks_8h_1a9c894f22a558dce02fceae5e306c8003" kindref="member">projectm_playlist_preset_switch_failed_event</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>preset_filename,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="playlist__callbacks_8h_1a8b287c054310ff48663fdab69d164856" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="playlist__callbacks_8h_1a8b287c054310ff48663fdab69d164856" kindref="member">projectm_playlist_set_preset_switched_event_callback</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="playlist__callbacks_8h_1afde318e6b0fe2cc68d93f2cfca396358" kindref="member">projectm_playlist_preset_switched_event</ref><sp/>callback,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="playlist__callbacks_8h_1a06f717a121acc3525d0b17cc31b84a96" refkind="member"><highlight class="normal">PROJECTM_PLAYLIST_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="playlist__callbacks_8h_1a06f717a121acc3525d0b17cc31b84a96" kindref="member">projectm_playlist_set_preset_switch_failed_event_callback</ref>(<ref refid="playlist__types_8h_1aaf3149816ac5442a6dad59270ddfa49b" kindref="member">projectm_playlist_handle</ref><sp/>instance,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="playlist__callbacks_8h_1a9c894f22a558dce02fceae5e306c8003" kindref="member">projectm_playlist_preset_switch_failed_event</ref><sp/>callback,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="artifacts/projectm-linux-shared-latest/include/projectM-4/playlist_callbacks.h"/>
  </compounddef>
</doxygen>
